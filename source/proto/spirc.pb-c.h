/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: spirc.proto */

#ifndef PROTOBUF_C_spirc_2eproto__INCLUDED
#define PROTOBUF_C_spirc_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Frame Frame;
typedef struct DeviceState DeviceState;
typedef struct Capability Capability;
typedef struct Goodbye Goodbye;
typedef struct State State;
typedef struct TrackRef TrackRef;
typedef struct Ad Ad;
typedef struct Metadata Metadata;


/* --- enums --- */

typedef enum _MessageType {
  MESSAGE_TYPE__kMessageTypeHello = 1,
  MESSAGE_TYPE__kMessageTypeGoodbye = 2,
  MESSAGE_TYPE__kMessageTypeProbe = 3,
  MESSAGE_TYPE__kMessageTypeNotify = 10,
  MESSAGE_TYPE__kMessageTypeLoad = 20,
  MESSAGE_TYPE__kMessageTypePlay = 21,
  MESSAGE_TYPE__kMessageTypePause = 22,
  MESSAGE_TYPE__kMessageTypePlayPause = 23,
  MESSAGE_TYPE__kMessageTypeSeek = 24,
  MESSAGE_TYPE__kMessageTypePrev = 25,
  MESSAGE_TYPE__kMessageTypeNext = 26,
  MESSAGE_TYPE__kMessageTypeVolume = 27,
  MESSAGE_TYPE__kMessageTypeShuffle = 28,
  MESSAGE_TYPE__kMessageTypeRepeat = 29,
  MESSAGE_TYPE__kMessageTypeVolumeDown = 31,
  MESSAGE_TYPE__kMessageTypeVolumeUp = 32,
  MESSAGE_TYPE__kMessageTypeReplace = 33,
  MESSAGE_TYPE__kMessageTypeLogout = 34,
  MESSAGE_TYPE__kMessageTypeAction = 35,
  MESSAGE_TYPE__kMessageTypeRename = 36,
  MESSAGE_TYPE__kMessageTypeUpdateMetadata = 128
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE)
} MessageType;
typedef enum _CapabilityType {
  CAPABILITY_TYPE__kSupportedContexts = 1,
  CAPABILITY_TYPE__kCanBePlayer = 2,
  CAPABILITY_TYPE__kRestrictToLocal = 3,
  CAPABILITY_TYPE__kDeviceType = 4,
  CAPABILITY_TYPE__kGaiaEqConnectId = 5,
  CAPABILITY_TYPE__kSupportsLogout = 6,
  CAPABILITY_TYPE__kIsObservable = 7,
  CAPABILITY_TYPE__kVolumeSteps = 8,
  CAPABILITY_TYPE__kSupportedTypes = 9,
  CAPABILITY_TYPE__kCommandAcks = 10,
  CAPABILITY_TYPE__kSupportsRename = 11,
  CAPABILITY_TYPE__kHidden = 12,
  CAPABILITY_TYPE__kSupportsPlaylistV2 = 13,
  CAPABILITY_TYPE__kSupportsExternalEpisodes = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CAPABILITY_TYPE)
} CapabilityType;
typedef enum _PlayStatus {
  PLAY_STATUS__kPlayStatusStop = 0,
  PLAY_STATUS__kPlayStatusPlay = 1,
  PLAY_STATUS__kPlayStatusPause = 2,
  PLAY_STATUS__kPlayStatusLoading = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PLAY_STATUS)
} PlayStatus;

/* --- messages --- */

struct  Frame
{
  ProtobufCMessage base;
  protobuf_c_boolean has_version;
  uint32_t version;
  char *ident;
  char *protocol_version;
  protobuf_c_boolean has_seq_nr;
  uint32_t seq_nr;
  protobuf_c_boolean has_typ;
  MessageType typ;
  DeviceState *device_state;
  Goodbye *goodbye;
  State *state;
  protobuf_c_boolean has_position;
  uint32_t position;
  protobuf_c_boolean has_volume;
  uint32_t volume;
  protobuf_c_boolean has_state_update_id;
  int64_t state_update_id;
  size_t n_recipient;
  char **recipient;
  protobuf_c_boolean has_context_player_state;
  ProtobufCBinaryData context_player_state;
  char *new_name;
  Metadata *metadata;
};
#define FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frame__descriptor) \
    , 0, 0, NULL, NULL, 0, 0, 0, MESSAGE_TYPE__kMessageTypeHello, NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0, {0,NULL}, NULL, NULL }


struct  DeviceState
{
  ProtobufCMessage base;
  char *sw_version;
  protobuf_c_boolean has_is_active;
  protobuf_c_boolean is_active;
  protobuf_c_boolean has_can_play;
  protobuf_c_boolean can_play;
  protobuf_c_boolean has_volume;
  uint32_t volume;
  char *name;
  protobuf_c_boolean has_error_code;
  uint32_t error_code;
  protobuf_c_boolean has_became_active_at;
  int64_t became_active_at;
  char *error_message;
  size_t n_capabilities;
  Capability **capabilities;
  char *context_player_error;
  size_t n_metadata;
  Metadata **metadata;
};
#define DEVICE_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_state__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, NULL, 0,NULL, NULL, 0,NULL }


struct  Capability
{
  ProtobufCMessage base;
  protobuf_c_boolean has_typ;
  CapabilityType typ;
  size_t n_intvalue;
  int64_t *intvalue;
  size_t n_stringvalue;
  char **stringvalue;
};
#define CAPABILITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&capability__descriptor) \
    , 0, CAPABILITY_TYPE__kSupportedContexts, 0,NULL, 0,NULL }


struct  Goodbye
{
  ProtobufCMessage base;
  char *reason;
};
#define GOODBYE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&goodbye__descriptor) \
    , NULL }


struct  State
{
  ProtobufCMessage base;
  char *context_uri;
  protobuf_c_boolean has_index;
  uint32_t index;
  protobuf_c_boolean has_position_ms;
  uint32_t position_ms;
  protobuf_c_boolean has_status;
  PlayStatus status;
  protobuf_c_boolean has_position_measured_at;
  uint64_t position_measured_at;
  char *context_description;
  protobuf_c_boolean has_shuffle;
  protobuf_c_boolean shuffle;
  protobuf_c_boolean has_repeat;
  protobuf_c_boolean repeat;
  char *last_command_ident;
  protobuf_c_boolean has_last_command_msgid;
  uint32_t last_command_msgid;
  protobuf_c_boolean has_playing_from_fallback;
  protobuf_c_boolean playing_from_fallback;
  protobuf_c_boolean has_row;
  uint32_t row;
  protobuf_c_boolean has_playing_track_index;
  uint32_t playing_track_index;
  size_t n_track;
  TrackRef **track;
  Ad *ad;
};
#define STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&state__descriptor) \
    , NULL, 0, 0, 0, 0, 0, PLAY_STATUS__kPlayStatusStop, 0, 0, NULL, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, NULL }


struct  TrackRef
{
  ProtobufCMessage base;
  protobuf_c_boolean has_gid;
  ProtobufCBinaryData gid;
  char *uri;
  protobuf_c_boolean has_queued;
  protobuf_c_boolean queued;
  char *context;
};
#define TRACK_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&track_ref__descriptor) \
    , 0, {0,NULL}, NULL, 0, 0, NULL }


struct  Ad
{
  ProtobufCMessage base;
  protobuf_c_boolean has_next;
  int32_t next;
  protobuf_c_boolean has_ogg_fid;
  ProtobufCBinaryData ogg_fid;
  protobuf_c_boolean has_image_fid;
  ProtobufCBinaryData image_fid;
  protobuf_c_boolean has_duration;
  int32_t duration;
  char *click_url;
  char *impression_url;
  char *product;
  char *advertiser;
  protobuf_c_boolean has_gid;
  ProtobufCBinaryData gid;
};
#define AD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ad__descriptor) \
    , 0, 0, 0, {0,NULL}, 0, {0,NULL}, 0, 0, NULL, NULL, NULL, NULL, 0, {0,NULL} }


struct  Metadata
{
  ProtobufCMessage base;
  char *type;
  char *metadata;
};
#define METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&metadata__descriptor) \
    , NULL, NULL }


/* Frame methods */
void   frame__init
                     (Frame         *message);
size_t frame__get_packed_size
                     (const Frame   *message);
size_t frame__pack
                     (const Frame   *message,
                      uint8_t             *out);
size_t frame__pack_to_buffer
                     (const Frame   *message,
                      ProtobufCBuffer     *buffer);
Frame *
       frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frame__free_unpacked
                     (Frame *message,
                      ProtobufCAllocator *allocator);
/* DeviceState methods */
void   device_state__init
                     (DeviceState         *message);
size_t device_state__get_packed_size
                     (const DeviceState   *message);
size_t device_state__pack
                     (const DeviceState   *message,
                      uint8_t             *out);
size_t device_state__pack_to_buffer
                     (const DeviceState   *message,
                      ProtobufCBuffer     *buffer);
DeviceState *
       device_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_state__free_unpacked
                     (DeviceState *message,
                      ProtobufCAllocator *allocator);
/* Capability methods */
void   capability__init
                     (Capability         *message);
size_t capability__get_packed_size
                     (const Capability   *message);
size_t capability__pack
                     (const Capability   *message,
                      uint8_t             *out);
size_t capability__pack_to_buffer
                     (const Capability   *message,
                      ProtobufCBuffer     *buffer);
Capability *
       capability__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   capability__free_unpacked
                     (Capability *message,
                      ProtobufCAllocator *allocator);
/* Goodbye methods */
void   goodbye__init
                     (Goodbye         *message);
size_t goodbye__get_packed_size
                     (const Goodbye   *message);
size_t goodbye__pack
                     (const Goodbye   *message,
                      uint8_t             *out);
size_t goodbye__pack_to_buffer
                     (const Goodbye   *message,
                      ProtobufCBuffer     *buffer);
Goodbye *
       goodbye__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   goodbye__free_unpacked
                     (Goodbye *message,
                      ProtobufCAllocator *allocator);
/* State methods */
void   state__init
                     (State         *message);
size_t state__get_packed_size
                     (const State   *message);
size_t state__pack
                     (const State   *message,
                      uint8_t             *out);
size_t state__pack_to_buffer
                     (const State   *message,
                      ProtobufCBuffer     *buffer);
State *
       state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   state__free_unpacked
                     (State *message,
                      ProtobufCAllocator *allocator);
/* TrackRef methods */
void   track_ref__init
                     (TrackRef         *message);
size_t track_ref__get_packed_size
                     (const TrackRef   *message);
size_t track_ref__pack
                     (const TrackRef   *message,
                      uint8_t             *out);
size_t track_ref__pack_to_buffer
                     (const TrackRef   *message,
                      ProtobufCBuffer     *buffer);
TrackRef *
       track_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   track_ref__free_unpacked
                     (TrackRef *message,
                      ProtobufCAllocator *allocator);
/* Ad methods */
void   ad__init
                     (Ad         *message);
size_t ad__get_packed_size
                     (const Ad   *message);
size_t ad__pack
                     (const Ad   *message,
                      uint8_t             *out);
size_t ad__pack_to_buffer
                     (const Ad   *message,
                      ProtobufCBuffer     *buffer);
Ad *
       ad__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ad__free_unpacked
                     (Ad *message,
                      ProtobufCAllocator *allocator);
/* Metadata methods */
void   metadata__init
                     (Metadata         *message);
size_t metadata__get_packed_size
                     (const Metadata   *message);
size_t metadata__pack
                     (const Metadata   *message,
                      uint8_t             *out);
size_t metadata__pack_to_buffer
                     (const Metadata   *message,
                      ProtobufCBuffer     *buffer);
Metadata *
       metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   metadata__free_unpacked
                     (Metadata *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Frame_Closure)
                 (const Frame *message,
                  void *closure_data);
typedef void (*DeviceState_Closure)
                 (const DeviceState *message,
                  void *closure_data);
typedef void (*Capability_Closure)
                 (const Capability *message,
                  void *closure_data);
typedef void (*Goodbye_Closure)
                 (const Goodbye *message,
                  void *closure_data);
typedef void (*State_Closure)
                 (const State *message,
                  void *closure_data);
typedef void (*TrackRef_Closure)
                 (const TrackRef *message,
                  void *closure_data);
typedef void (*Ad_Closure)
                 (const Ad *message,
                  void *closure_data);
typedef void (*Metadata_Closure)
                 (const Metadata *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    message_type__descriptor;
extern const ProtobufCEnumDescriptor    capability_type__descriptor;
extern const ProtobufCEnumDescriptor    play_status__descriptor;
extern const ProtobufCMessageDescriptor frame__descriptor;
extern const ProtobufCMessageDescriptor device_state__descriptor;
extern const ProtobufCMessageDescriptor capability__descriptor;
extern const ProtobufCMessageDescriptor goodbye__descriptor;
extern const ProtobufCMessageDescriptor state__descriptor;
extern const ProtobufCMessageDescriptor track_ref__descriptor;
extern const ProtobufCMessageDescriptor ad__descriptor;
extern const ProtobufCMessageDescriptor metadata__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_spirc_2eproto__INCLUDED */
